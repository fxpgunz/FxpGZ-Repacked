
class [!output CLASS_NAME]ClassDesc : public ClassDesc2 
{
public:
	virtual int IsPublic() 							{ return TRUE; }
[!if STATIC_TYPE != 0]	
	virtual void* Create(BOOL /*loading = FALSE*/) 	{ return [!output CLASS_NAME]::GetInstance(); }
[!else]
[!if MATERIAL_TYPE != 0]	
	virtual void* Create(BOOL loading = FALSE) 		{ return new [!output CLASS_NAME](loading); }
[!else]
	virtual void* Create(BOOL /*loading = FALSE*/) 		{ return new [!output CLASS_NAME](); }
[!endif]
[!endif]
	virtual const TCHAR *	ClassName() 			{ return GetString(IDS_CLASS_NAME); }
	virtual SClass_ID SuperClassID() 				{ return [!output SUPER_CLASS_ID]; }
	virtual Class_ID ClassID() 						{ return [!output CLASS_NAME]_CLASS_ID; }
[!if SKIN_GIZMO_TYPE != 0]
	// The Skin modifier checks the category to decide whether the modifier is a Skin Gizmo.  This 
	// must not be changed
	virtual const TCHAR* Category() 				{ return GetString(IDS_PW_GIZMOCATEGORY); }
[!else]
	virtual const TCHAR* Category() 				{ return GetString(IDS_CATEGORY); }
[!endif]

	virtual const TCHAR* InternalName() 			{ return _T("[!output CLASS_NAME]"); }	// returns fixed parsable name (scripter-visible name)
	virtual HINSTANCE HInstance() 					{ return hInstance; }					// returns owning module handle
	
[!if MANIP_TYPE != 0]
	virtual BOOL IsManipulator() 						{ return TRUE; }

	/********************************************************************************************************
	*
	Returns true if the class is a manipulator and it can manipulates the ReferenceTarget passed 
	to it.  In this case it simple states that it can manipulate itself.    
	*
	\********************************************************************************************************/
	
	virtual BOOL CanManipulate(ReferenceTarget* hTarget) 
	{
		//TODO: Return TRUE if it can manipulate the ReferenceTarget.
		return hTarget->ClassID() == ClassID() && hTarget->SuperClassID() == SuperClassID();
	}

	virtual Manipulator* CreateManipulator(RefTargetHandle hTarget, INode* pNode);
[!endif]

};


ClassDesc2* Get[!output CLASS_NAME]Desc() { 
	static [!output CLASS_NAME]ClassDesc [!output CLASS_NAME]Desc;
	return &[!output CLASS_NAME]Desc; 
}

[!if SPACE_WARP_TYPE != 0]
/*===========================================================================*\
 |	Class Descriptor for the World Space Object
\*===========================================================================*/

class [!output CLASS_NAME]ObjClassDesc : public ClassDesc2 
{
public:
	virtual int IsPublic()									{ return TRUE; }
	virtual void*	Create(BOOL /*loading = FALSE*/)	{ return new [!output CLASS_NAME]Object; }
	virtual const TCHAR*	ClassName()				{ return GetString(IDS_CLASS_NAME); }
	virtual SClass_ID	SuperClassID()					{ return WSM_OBJECT_CLASS_ID; }
	virtual Class_ID ClassID()								{ return WARPOBJ_CLASS_ID; }
	virtual const TCHAR* Category() 					{ return _T("");}

	// Hardwired name, used by MAX Script as unique identifier
	virtual const TCHAR*	InternalName()			{ return _T("[!output CLASS_NAME]Object"); }
	virtual HINSTANCE	HInstance()					{ return hInstance; }
};


ClassDesc2* Get[!output CLASS_NAME]ObjDesc() { 
	static [!output CLASS_NAME]ObjClassDesc [!output CLASS_NAME]ObjDesc;
	return &[!output CLASS_NAME]ObjDesc; 
}

[!endif]
